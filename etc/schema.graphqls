# Copyright Â© Magento, Inc. All rights reserved.
# See COPYING.txt for license details.

input PaymentMethodInput {
    worldpay_cc: WorldpayInput @doc(description: "Defines the required attributes for Worldpay payments")
}

input WorldpayInput {
    cc_name: String! @doc(description: "Payer Name")
    cc_number: String! @doc(description: " Card number")
    cc_exp_month: String! @doc(description: "Exp Month")
    cc_exp_year: String! @doc(description: "Exp Year")
    cvc: String! @doc(description: "CVC")
    save_card: String! @doc(description: "Saving Card")
    cvcHref: String! @doc(description: "CVC HREF")
    sessionHref: String! @doc(description: "Session Href")
    tokenId: String! @doc(description: "Token Id")
    tokenUrl: String! @doc(description: "Token Url")
    googlepayToken: String! @doc(description: "Googlepay Token")
    applepayToken: String! @doc(description: "Applepay Token")
    ach_account: String! @doc(description: "Account type")
    ach_accountNumber: String! @doc(description: "Account Number")
    ach_routingNumber: String! @doc(description: "Routing Number")
    ach_checknumber: String @doc(description: "Check Number")
    ach_companyname: String @doc(description: "Company Name")
    ach_emailaddress: String @doc(description: "Email Id")
    statementNarrative: String @doc(description: "Narrative")
}

type SavedCards @doc(description: "SavedCards retrieves the avaialable stored worldpay cards for a customer") {
    id: Int @doc(description: "The ID generated for each token")
    tokenid: String @doc(description: "Token id generated for each worldpay stored card")
    cardnumber: String @doc(description: "card number present on worldpay stored card")
    cardholdername: String @doc(description: "card name present on worldpay stored card")
    cardexpirymonth: Int @doc(description: "card expiry month for the worldpay stored card")
    cardexpiryyear: Int @doc(description: "card expiry year for the worldpay stored card")
    method: String @doc(description: "describes the method used to save the card")
}

type Mutation {
    deleteWorldpayToken(id: Int!, tokenid: String!): DeleteWorldpayTokenOutput @resolver(class: "\\Sapient\\AccessWorldpay\\Model\\Resolver\\DeleteToken") @doc(description:"Delete worldpay token")
    updateWorldpayToken(id: Int!, input: UpdateWorldpayInput!): UpdateWorldpayTokenOutput @resolver(class: "\\Sapient\\AccessWorldpay\\Model\\Resolver\\UpdateToken")
	@doc(description:"Update worldpay token")
}

type DeleteWorldpayTokenOutput {
    result: Boolean!
}

type UpdateWorldpayTokenOutput {
    card : SavedCards
}

input UpdateWorldpayInput {
    tokenid: String @doc(description: "Token id generated for each worldpay stored card")
    cardholdername: String @doc(description: "card name present on worldpay stored card")
    cardexpirymonth: Int @doc(description: "card expiry month for the worldpay stored card")
    cardexpiryyear: Int @doc(description: "card expiry year for the worldpay stored card")
}

# Declarative Query For Fetch Google Pay Settings

type GooglepaySettings @resolver(class: "\\Sapient\\AccessWorldpay\\Model\\Resolver\\GooglepaySettings") {
    settings: [GpayConfigurations]! @doc(description: "googlepay admin settings")
}

type GpayConfigurations @doc(description: "Retrieves the Googlepay admin settings") {
    enabled: Int @doc(description: "Gives detail about is googlepay is enabled or disabled")
    paymentmethods: PaymentMethods @doc(description: "Gives the list of selected payment methods")
    supportedauthentication: SupportedAuthentication  @doc(description: "Gives the list of supported authentication methods")
    gatewayname: String @doc(description: "Gives gateway name")
    gatewaymerchantid: String @doc(description: "Gives gateway merchant id")
    googlemerchantid: String @doc(description: "Gives google merchant id")
    googlemerchantname: String @doc(description: "Gives google merchant name")
    test3dscardholdername: String @doc(description: "Gives test 3ds cardholdername ")
}

type PaymentMethods @doc(description: "Gives the list of selected payment methods"){
    method: [String] @doc(description: "method name")
}

type SupportedAuthentication @doc(description: "Gives the list of supported authentication methods"){
    option: [String] @doc(description: "auth name")
}

# Declarative Query For Fetch Applepay, GooglePay and CAM Settings
type Query {
    applepaySettings: ApplepaySettings @doc(description: "Return applepay admin settings") @resolver(class: "\\Sapient\\AccessWorldpay\\Model\\Resolver\\ApplepaySettings")
    googlepaySettings: GooglepaySettings @doc(description: "Return googlepay admin settings") @resolver(class: "\\Sapient\\AccessWorldpay\\Model\\Resolver\\GooglepaySettings")
    camSettings: CamSettings @doc(description: "Return cam label admin settings") @resolver(class: "\\Sapient\\AccessWorldpay\\Model\\Resolver\\CamSettings")
    worldpayTokens: WorldpayToken @doc(description: "Return a list of worldpay payment tokens for a customer") @resolver(class: "\\Sapient\\AccessWorldpay\\Model\\Resolver\\SavedCards")
    customLabelsSettings: CustomLabelsSettings @doc(description: "Return custom labels admin settings") @resolver(class: "\\Sapient\\AccessWorldpay\\Model\\Resolver\\CustomLabelsSettings")
}

type ApplepaySettings @resolver(class: "\\Sapient\\AccessWorldpay\\Model\\Resolver\\ApplepaySettings") {
    settings: [ApplepayConfigurations]! @doc(description: "applelepay admin settings")
}

type ApplepayConfigurations @doc(description: "Retrieves the applelepay admin settings") {
    enabled: Int @doc(description: "Gives is applelepay method enabled or disabled")
    certificationkey: String @doc(description: "Gives certification key")
    certificationcrt: String @doc(description: "Gives certification number")
    certificationpassword: String @doc(description: "Gives certification password")    
    merchantname: String @doc(description: "Gives merchant name")
    domainname: String @doc(description: "Gives domain details ")
}


type CamSettings {
    settings: [CamConfigurations] @doc(description: "cam admin settings")
}

type CamConfigurations @doc(description: "Retrieves the Googlepay admin settings") {    
    accountLevelMessage: AccountLevelMessage @doc(description: "Gives the list of custom account level message list")
    accessWorldPayMessage: AccessWorldPayMessage  @doc(description: "Gives the list of custom accessworldpay message list")
    checkoutMessage: CheckoutMessage @doc(description: "Gives the list of custom checkout alert message list")
    
}

type AccountLevelMessage @doc(description: "Gives the list of available custom alert message list"){
    setting: Record! @doc(description: "message list")
}

type AccessWorldPayMessage @doc(description: "Gives the list of available custom alert message list"){
    setting: Record! @doc(description: "message list")
}

type CheckoutMessage @doc(description: "Gives the list of available custom alert message list"){
    setting: Record! @doc(description: "message list")
}

type Record @doc(description: "Gives the list of available custom alert message list"){
    list:[Records]! @doc(description: "message list")
}

type Records @doc(description: "Gives the list of available custom alert message list"){
    messageCode:String @doc(description: "message list")
    actualMessage:String @doc(description: "message list")
    customMessage:String @doc(description: "message list")
}

type WorldpayToken @resolver(class: "\\Sapient\\AccessWorldpay\\Model\\Resolver\\SavedCards") {
    cards: [SavedCards]! @doc(description: "An array of worldpay tokens")
}

#Configurable Labels

type CustomLabelsSettings {
    settings: [CustomLabelsConfigurations] @doc(description: "custom labels admin settings")
}

type CustomLabelsConfigurations @doc(description: "Retrieves the custom labels admin settings") {    
    accountLabels: AccountLabels @doc(description: "Gives the list of custom account level labels list")
    adminLabels: AdminLabels  @doc(description: "Gives the list of custom admin level labels list")
    checkoutLabels: CheckoutLabels @doc(description: "Gives the list of custom checkout level labels list")
    
}
type AccountLabels @doc(description: "Gives the list of available custom labels list"){
    setting: RecordLabels! @doc(description: "message list")
}
type AdminLabels @doc(description: "Gives the list of available custom labels list"){
    setting: RecordLabels! @doc(description: "message list")
}
type CheckoutLabels @doc(description: "Gives the list of available custom labels list"){
    setting: RecordLabels! @doc(description: "message list")
}
type RecordLabels @doc(description: "Gives the list of available custom alert message list"){
    list:[RecordsLabelsList]! @doc(description: "message list")
}

type RecordsLabelsList @doc(description: "Gives the list of available custom alert message list"){
    labelCode:String @doc(description: "message list")
    defaultLabel:String @doc(description: "message list")
    customLabel:String @doc(description: "message list")
}